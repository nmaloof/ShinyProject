Wild_FiresTemp %>% select(., STATE) %>% group_by(., STATE) %>% summarise(., n = n())
map_data(state)
map_data('state')
map_data('state') %>% ggplot(., aes(x = long, y = lat)) + geom_polygon()
map
map('USA', regions = 'states')
map('state')
Test <- Wild_FiresTemp %>% select(., STATE) %>% group_by(., STATE) %>% summarise(., n = n())
library(plotly)
p <- plot_geo(Test, locationmode = 'USA-States')
p
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n)
p
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n) %>% colorbar(title="Millions")
p
p
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n) %>% colorbar(title="Millions")
p
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n) %>% colorbar(title="Millions") %>%
colorbar(title = "Millions USD") %>% layout(title = '2011 Agri')
p
g <- list(scope = 'usa')
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n) %>% colorbar(title="Millions") %>%
colorbar(title = "Millions USD") %>% layout(title = '2011 Agri', geo = g)
p
g <- list(scope = 'usa', showlakes = TRUE)
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n) %>% colorbar(title="Millions") %>%
colorbar(title = "Millions USD") %>% layout(title = '2011 Agri', geo = g)
p
g <- list(scope = 'usa', showlakes = TRUE, projection = list(type = 'albers usa'))
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n) %>% colorbar(title="Millions") %>%
colorbar(title = "Millions USD") %>% layout(title = '2011 Agri', geo = g)
p
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n, color =n) %>% colorbar(title="Millions") %>%
colorbar(title = "Millions USD") %>% layout(title = '2011 Agri', geo = g)
p
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n, color = total.exports) %>% colorbar(title="Millions") %>%
colorbar(title = "Millions USD") %>% layout(title = '2011 Agri', geo = g)
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n, color = ~n) %>% colorbar(title="Millions") %>%
colorbar(title = "Millions USD") %>% layout(title = '2011 Agri', geo = g)
p
p
p <- plot_geo(Test, locationmode = 'USA-States') %>% add_trace(z  = ~n, color = ~n, colors = 'red') %>% colorbar(title="Millions") %>%
colorbar(title = "Millions USD") %>% layout(title = '2011 Agri', geo = g)
p
Temp
Test
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE
)
plot_geo(locationmode = 'USA-states')
plot_geo(locationmode = 'USA-states') %>% add_trace() %>% colorbar() %>%
layout(title = '2011 US Agriculture Exports', geo = g)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
colnames(df)
df$state
plot_geo(Test,locationmode = 'USA-states') %>% add_trace() %>% colorbar() %>%
layout(title = '2011 US Agriculture Exports', geo = g)
plot_geo(Test,locationmode = 'USA-states') %>%
add_trace(z = ~n) %>%
colorbar() %>%
layout(title = '2011 US Agriculture Exports', geo = g)
df$code
Test
plot_geo(Test,locationmode = 'USA-states') %>%
add_trace(z = ~n, locations = ~STATE, color = ~n, colors = 'Purples') %>%
colorbar() %>%
layout(title = '2011 US Agriculture Exports', geo = g)
plot_geo(Test,locationmode = 'USA-states') %>%
add_trace(z = ~n, locations = ~STATE, color = ~n, colors = 'Reds') %>%
colorbar() %>%
layout(title = '2011 US Agriculture Exports', geo = g)
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
library(googleVis)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
coloraxis="{colors:['white', 'red']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
coloraxis="{colors:['grey', 'red']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['white', 'red']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['grey', 'red']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['lightred', 'red']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['green', 'red']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['white', 'red']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['FF7F7F', 'FF0000']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['FFFBFB', 'FF0000']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
Test %>% filter(, n == 66)
Test %>% filter(, n == 66)
Test
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['FFFBFB', 'AD0000']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['FFFBFB', 'A90000']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['white', 'red']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['white', 'D10000']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['FAEF03', 'D10000']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['FFB8B8', 'D10000']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['white', 'FF0000']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
runApp('~/CodingProjects/ShinyProject')
p <- gvisGeoChart(Test, "STATE", "n",
options = list(
region = "US",
displayMode = "regions",
resolution = "provinces",
colorAxis="{colors:['white', 'FF0000']}",
backgroundColor = "lightblue",
title = "Average",
width = "auto",
height = "auto"
)
)
plot(p)
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
unique(Wild_FiresTemp$STAT_CAUSE_DESCR)
runApp('~/CodingProjects/ShinyProject')
conn <- dbConnect(SQLite(), dbname = "/Users/nicholasmaloof/CodingProjects/ShinyProject/USWildFires.sqlite")
dbListTables(conn)
dbListFields(conn, "WildFires")
WildFireData <- dbGetQuery(conn, "SELECT * FROM WildFires")
dbListFields(conn, "WildFires")
colnames(WildFireData)
unique(WildFireData$STATE)
WildFireData <- WildFireData %>% filter(., STATE != "DC", STATE != "PR")
unique(WildFireData$STATE)
dbRemoveTable(conn, "WildFires")
dbWriteTable(conn = conn, name = "WildFires", value = WildFireData)
dbDisconnect(conn=conn)
runApp('~/CodingProjects/ShinyProject')
unique(Wild_FiresTemp$STAT_CAUSE_DESCR)
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
min(Wild_FiresTemp$FIRE_YEAR)
max(Wild_FiresTemp$FIRE_YEAR)
1:2
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
runApp('~/CodingProjects/ShinyProject')
conn <- dbConnecter(session = session, dbname = "./USWildFires.sqlite")
conn <- dbConnect(SQLite(), dbname = "/Users/nicholasmaloof/CodingProjects/ShinyProject/USWildFires.sqlite")
dbListTables(conn)
dbListFields(conn, "WildFires")
WildFireData <- dbGetQuery(conn, "SELECT * FROM WildFires")
?fwrite
system.time(WildFireData <- dbGetQuery(conn, "SELECT * FROM WildFires"))
fwrite(WildFireData, file = "WildFire.csv")
system.time(Test <- fread("WildFire.csv"))
setwd("~/CodingProjects/ShinyProject")
fwrite(WildFireData, file = "WildFires.csv")
rm(Test)
dbDisconnect(conn=conn)
rm(conn)
Test <- fread("WildFires.csv")
class(Test)
system.time(Test <- fread("WildFires.csv"))
system.time(Test <- fread("WildFires.csv"))
runApp()
unique(Wild_FiresTemp$STAT_CAUSE_DESCR)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
2 %in% c(3,4,5)
2 %in% c(2,4,5)
Test <- c(1,2,3,4,5,6)
Test <- data.frame(A = c(1,2,3), B = c(4,5,6))
Test
Test <- as.data.table(Test)
Test
Test[A == 1]
Test[c(1,2) %in% A]
Test[A %in% c(1,2)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Wild_FiresTemp %>% filter(., STATE = "CA", STAT_CAUSE_DESCR == "Lightning") %>% group_by(., STATE) %>% summarise(., n())
Wild_FiresTemp %>% filter(., STATE == "CA", STAT_CAUSE_DESCR == "Lightning") %>% group_by(., STATE) %>% summarise(., n())
runApp()
Wild_FiresTemp %>% filter(., STATE == "TX", STAT_CAUSE_DESCR == "Lightning") %>% group_by(., STATE) %>% summarise(., n())
runApp()
Test
Test[A %in% c(2,3)]
Test[A %in% c(2)]
Test[A %in% c(2,3)]
Test[A %in% c(2,3) & B %in% c(5)]
Test[A %in% c(2,3) & B %in% c(5,6)]
class(Wild_FiresTemp)
class(Wild_Fires)
class(WildFireData)
rm(df)
rm(dbConnecter())
rm(dbConnecter)
rm(dbGetData)
rm(dbGetDataState)
runApp()
WildFireData <- as.data.table(WildFireData)
WildFireData[STAT_CAUSE_DESCR == "Lightning", .(TotalFires = .N), by = STATE]
unique(WildFireData$STATE)
WildFireData[STAT_CAUSE_DESCR == "Lightning", .(TotalFires = .N), by = STATE][order(STATE)]
order(unique(WildFireData$STATE))
WildFireData[STAT_CAUSE_DESCR == "Lightning", .(TotalFires = .N), by = STATE][order(STATE)][,STATE]
WildFireData[STAT_CAUSE_DESCR == "Lightning", .(TotalFires = .N), by = STATE][order(STATE)][,STATE] %notin% unique(WildFireData$STATE)
WildFireData[STAT_CAUSE_DESCR == "Lightning", .(TotalFires = .N), by = STATE][order(STATE)][,STATE] %in% unique(WildFireData$STATE)
unique(WildFireData$STATE) %in% WildFireData[STAT_CAUSE_DESCR == "Lightning", .(TotalFires = .N), by = STATE][order(STATE)][,STATE]
runApp()
runApp()
runApp()
runApp()
gwd()
wd()
getwd()
WildFires <- fread("WildFires.csv")
str(WildFires)
WildFires <- fread("WildFires.csv", stringsAsFactors = T)
str(WildFires)
WildFires <- fread("WildFires.csv")
str(WildFires)
WildFires$DISCOVERY_DATE <- as.Date(WildFires$DISCOVERY_DATE, origin = "1970-01-01")
WildFires$CONT_DATE <- as.Date(WildFires$CONT_DATE, origin = "1970-01-01")
str(WildFires)
?fwrite
fwrite(WildFires, file = "WildFires.csv")
WildFires <- fread("WildFires.csv")
str(WildFires)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(WildFires)
WildFires[FIRE_YEAR == 1992, .(TotalCount = .N), by = STATE]
runApp()
Wild_Fires[FIRE_YEAR == 2000, .(TotalFires = .N), by = STATE]
str(WildFires)
Wild_Fires[STAT == 2000, .(TotalFires = .N), by = STATE]
Wild_Fires[STAT_CAUSE_DESCR == "Lightning", .(TotalFires = .N), by = STATE]
Wild_Fires[STAT_CAUSE_DESCR == "Lightning"][1:5]
Wild_Fires[STAT_CAUSE_DESCR == "Lightning", .(TotalFires = .N), by = STATE]
Wild_Fires[STAT_CAUSE_DESCR == "Lightning"][1:5]
runApp()
runApp()
runApp()
SampleData <- WildFires %>% select(., STAT_CAUSE_DESCR, FIRE_SIZE, AverageTemperature, STATE) %>%
filter(., !is.na(AverageTemperature), !is.na(FIRE_SIZE), !is.na(STAT_CAUSE_DESCR))
CorFunc <- function(df){
return(data_frame(COR = cor(df$FIRE_SIZE, df$STAT_CAUSE_DESCR)))
}
library(plyr)
Correlations_Size_Cause <- ddply(SampleData, .(STAT_CAUSE_DESCR, STATE), CorFunc)
?cor
Correlations_Size_Cause <- ddply(SampleData, .(STATE), CorFunc)
runApp()
runApp()
Test <- data.frame(n = 0, STATE = 0)
plot_geo(Test,locationmode = 'USA-states') %>%
add_trace(z = ~n, locations = ~STATE, color = ~n, colors = 'Reds') %>%
colorbar() %>%
layout(title = '2011 US Agriculture Exports', geo = g)
runApp()
runApp()
plot_geo(Test,locationmode = 'USA-states') %>%
add_trace(z = ~n, locations = ~STATE, color = ~n, colors = 'Reds') %>%
colorbar() %>%
layout(title = '2011 US Agriculture Exports', geo = g)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
setBackground = 'blue'
)
plot_geo(Test,locationmode = 'USA-states') %>%
add_trace(z = ~n, locations = ~STATE, color = ~n, colors = 'Reds') %>%
colorbar() %>%
layout(title = '2011 US Agriculture Exports', geo = g)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE
)
plot_geo(Test,locationmode = 'USA-states') %>%
add_trace(z = ~n, locations = ~STATE, color = ~n, colors = 'Reds') %>%
colorbar() %>%
layout(title = '2011 US Agriculture Exports', geo = g)
?plot_ly
p2 <- plot_ly(data = WildFires, x = ~STAT_CAUSE_DESCR, y = ~FIRE_SIZE, type = 'box')
p2
getwd()
